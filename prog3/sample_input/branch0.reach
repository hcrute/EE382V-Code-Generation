
******  DataFlow Result for function small  ******
{ s }
entry:
  %s.addr = alloca i32, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %c = alloca i32, align 4
  store i32 %s, i32* %s.addr, align 4
  %0 = load i32, i32* %s.addr, align 4
  %add = add nsw i32 100, %0
  store i32 %add, i32* %a, align 4
  %1 = load i32, i32* %s.addr, align 4
  %mul = mul nsw i32 25, %1
  store i32 %mul, i32* %b, align 4
  store i32 0, i32* %c, align 4
  %2 = load i32, i32* %a, align 4
  %3 = load i32, i32* %b, align 4
  %cmp = icmp sgt i32 %2, %3
  br i1 %cmp, label %if.then, label %if.else
{ s s.addr   mul a b c add   cmp }
---
{ s s.addr   mul a b c add   cmp }
if.then:                                          ; preds = %entry
  %4 = load i32, i32* %a, align 4
  %idxprom = sext i32 %4 to i64
  %arrayidx = getelementptr inbounds [1000 x i32], [1000 x i32]* @A, i64 0, i64 %idxprom
  store i32 0, i32* %arrayidx, align 4
  %5 = load i32, i32* %a, align 4
  call void @error(i32 %5)
  %6 = load i32, i32* %b, align 4
  %call = call i32 @extra(i32 %6)
  %7 = load i32, i32* %b, align 4
  %idxprom1 = sext i32 %7 to i64
  %arrayidx2 = getelementptr inbounds [1000 x i32], [1000 x i32]* @A, i64 0, i64 %idxprom1
  %8 = load i32, i32* %arrayidx2, align 4
  %add3 = add nsw i32 %call, %8
  store i32 %add3, i32* %c, align 4
  br label %if.end
{ s s.addr   mul a b c add   cmp  idxprom arrayidx   call  idxprom1 arrayidx2  add3 }
---
{ s s.addr   mul a b c add   cmp }
if.else:                                          ; preds = %entry
  %9 = load i32, i32* %a, align 4
  %call4 = call i32 @extra(i32 %9)
  store i32 %call4, i32* %c, align 4
  br label %if.end
{ s s.addr   mul a b c add  call4   cmp }
---
{ s s.addr   mul a b c add  call4   cmp  idxprom arrayidx   call  idxprom1 arrayidx2  add3 }
if.end:                                           ; preds = %if.else, %if.then
  %10 = load i32, i32* %c, align 4
  ret i32 %10
{ s s.addr   mul a b c add  call4    cmp  idxprom arrayidx   call  idxprom1 arrayidx2  add3 }
---
