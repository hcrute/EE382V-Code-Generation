
******  DataFlow Result for function main  ******
{ }
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %min = alloca i32, align 4
  %k = alloca i32, align 4
  %l = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 -1, i32* %min, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond
{ l i j min k }
---
{ l i j min k }
for.cond:                                         ; preds = %for.inc13, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 10000
  br i1 %cmp, label %for.body, label %for.end15
{ l i j min k }
---
{ l i j min k }
for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  store i32 %1, i32* %j, align 4
  br label %for.cond1
{ l i j min k }
---
{ l i j min k }
for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %cmp2 = icmp ult i32 %2, 10000
  br i1 %cmp2, label %for.body3, label %for.end
{ l i j min k }
---
{ l i j min k }
for.body3:                                        ; preds = %for.cond1
  %3 = load i32, i32* %i, align 4
  %call = call i32 @pentagonal(i32 %3)
  store i32 %call, i32* %k, align 4
  %4 = load i32, i32* %j, align 4
  %call4 = call i32 @pentagonal(i32 %4)
  store i32 %call4, i32* %l, align 4
  %5 = load i32, i32* %k, align 4
  %6 = load i32, i32* %l, align 4
  %add = add i32 %5, %6
  %call5 = call i32 @is_pentagonal(i32 %add)
  %tobool = icmp ne i32 %call5, 0
  br i1 %tobool, label %land.lhs.true, label %if.end12
{ l i j min k }
---
{ l i j min k }
land.lhs.true:                                    ; preds = %for.body3
  %7 = load i32, i32* %l, align 4
  %8 = load i32, i32* %k, align 4
  %sub = sub i32 %7, %8
  %call6 = call i32 @is_pentagonal(i32 %sub)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.then, label %if.end12
{ l i j min k }
---
{ l i j min k }
if.then:                                          ; preds = %land.lhs.true
  %9 = load i32, i32* %l, align 4
  %10 = load i32, i32* %k, align 4
  %sub8 = sub i32 %9, %10
  %11 = load i32, i32* %min, align 4
  %cmp9 = icmp ult i32 %sub8, %11
  br i1 %cmp9, label %if.then10, label %if.end
{ l i j min k }
---
{ l i j min k }
if.then10:                                        ; preds = %if.then
  %12 = load i32, i32* %l, align 4
  %13 = load i32, i32* %k, align 4
  %sub11 = sub i32 %12, %13
  store i32 %sub11, i32* %min, align 4
  br label %if.end
{ l i j min k }
---
{ l i j min k }
if.end:                                           ; preds = %if.then10, %if.then
  br label %if.end12
{ l i j min k }
---
{ l i j min k }
if.end12:                                         ; preds = %if.end, %land.lhs.true, %for.body3
  br label %for.inc
{ l i j min k }
---
{ l i j min k }
for.inc:                                          ; preds = %if.end12
  %14 = load i32, i32* %j, align 4
  %inc = add i32 %14, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1
{ l i j min k }
---
{ l i j min k }
for.end:                                          ; preds = %for.cond1
  br label %for.inc13
{ l i j min k }
---
{ l i j min k }
for.inc13:                                        ; preds = %for.end
  %15 = load i32, i32* %i, align 4
  %inc14 = add i32 %15, 1
  store i32 %inc14, i32* %i, align 4
  br label %for.cond
{ l i j min k }
---
{ min }
for.end15:                                        ; preds = %for.cond
  %16 = load i32, i32* %min, align 4
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %16)
  ret i32 0
{ }
---

******  DataFlow Result for function pentagonal  ******
{ n }
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %mul = mul i32 3, %1
  %sub = sub i32 %mul, 1
  %mul1 = mul i32 %0, %sub
  %div = udiv i32 %mul1, 2
  ret i32 %div
{ }
---

******  DataFlow Result for function is_pentagonal  ******
{ n }
entry:
  %n.addr = alloca i32, align 4
  %sq = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %mul = mul i32 24, %0
  %add = add i32 1, %mul
  %conv = uitofp i32 %add to double
  %call = call double @sqrt(double %conv) #4
  %conv1 = fptoui double %call to i32
  store i32 %conv1, i32* %sq, align 4
  %1 = load i32, i32* %sq, align 4
  %2 = load i32, i32* %sq, align 4
  %mul2 = mul i32 %1, %2
  %3 = load i32, i32* %n.addr, align 4
  %mul3 = mul i32 24, %3
  %add4 = add i32 1, %mul3
  %cmp = icmp eq i32 %mul2, %add4
  br i1 %cmp, label %land.rhs, label %land.end
{ sq }
---
{ sq }
land.rhs:                                         ; preds = %entry
  %4 = load i32, i32* %sq, align 4
  %add6 = add i32 1, %4
  %rem = urem i32 %add6, 6
  %cmp7 = icmp eq i32 %rem, 0
  br label %land.end
{ cmp7 }
---
{ cmp7 }
land.end:                                         ; preds = %land.rhs, %entry
  %5 = phi i1 [ false, %entry ], [ %cmp7, %land.rhs ]
  %land.ext = zext i1 %5 to i32
  ret i32 %land.ext
{ }
---
